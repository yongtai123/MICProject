/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 2.16.0 from webgme on Mon Nov 13 2017 16:57:49 GMT-0600 (CST).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of DACodeGenerator.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin DACodeGenerator.
     * @constructor
     */
    var DACodeGenerator = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    DACodeGenerator.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    DACodeGenerator.prototype = Object.create(PluginBase.prototype);
    DACodeGenerator.prototype.constructor = DACodeGenerator;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    DACodeGenerator.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
		core = this.core,
		logger = this.logger,
		treeData = {},
	        activeNode = this.activeNode;

	    function dfsTree(nodes,node){
	  	      var members = {};
	  	      members.name = core.getAttribute(node,'name');
	  	      if (core.getParent(node) != null){
	  		            members.isMeta = core.isMetaNode(node);
	  		            members.metaType = core.getAttribute(core.getBaseType(node), 'name');
	  		            var attributes = core.getAttributeNames(node);
	  		            if (!core.isMetaNode(node)){
	  				            if (core.isConnection(node)){
	  						              members.src = core.getAttribute(nodes[core.getPointerPath(node, 'src')], 'index');
	  						              members.dst = core.getAttribute(nodes[core.getPointerPath(node, 'dst')], 'index'); 
	  						            }
	  				            for (let i = 0; i < attributes.length; i+=1){
	  						              if (attributes[i] != 'scriptCode' && attributes[i] !== 'name' && attributes[i] !== 'documentation' && core.getAttribute(node, attributes[i]) != null  && core.getAttribute(node, attributes[i]) != ''){
	  								                  members[attributes[i]] = core.getAttribute(node, attributes[i]);
	  								                }
	  						            }
	  				          }
	  		          }
	  
	  	      members.children = {};
	  	      var cPaths = core.getChildrenPaths(node);
	  	      for (let i = 0; i < cPaths.length; i+=1){
	  		            var child = nodes[cPaths[i]];
	  		            members.children[core.getRelid(child)] = dfsTree(nodes, child);
	  		          }
	  	      return members;
	  	    }  

	      
	      function nbrOfAgents(members){
		          let nbr = 0;
		          for (var i in members.children){
				        if (members.children[i].metaType == 'Agent') {
						        nbr += 1;
						      }
				      }
		          members.nbrOfAgents = nbr;
		          return members;
		        }


	      function buildMatlabScript(members){
		          var mFileString = '';
		          
		          mFileString += 'function Adjacency = getAdjacency()' + '\n';
		          mFileString += '  size = '+ members.nbrOfAgents +';'+'\n';
		          mFileString += '  Adjacency = zeros(size);' + '\n';
		          
		          for (var i in members.children){
				  	    if (members.children[i].metaType == 'Link'){
						    		    let index1 = members.children[i].src;
						    		    let index2 = members.children[i].dst; 
						          
						            mFileString += '  Adjacency('+index1+','+index2+ ') = 1;' +'\n';
						            mFileString += '  Adjacency('+index2+','+index1+ ') = 1;' +'\n'; 
						          }
				      }

		      	  logger.info(mFileString);

		          return mFileString;
		        }

		function buildPythonScript(members){
		          var mFileString = '';
		          
	    		  mFileString += 'import matplotlib.pyplot as plt' + '\n';
	    		  mFileString += 'import numpy as np' + '\n';
	    	          
		          mFileString += 't = np.arange(0.0, 2.0, 0.01)' + '\n';
		          mFileString += 's = 1 + np.sin(2*np.pi*t)'+'\n';
		          mFileString += 'plt.plot(t,s)' + '\n';

		          mFileString += 'plt.savefig(' + '"'+ members.name + '.png' + '")' + '\n';
		          logger.info(mFileString);

		          return mFileString;
		        }



        // Using the logger.
        self.logger.debug('This is a debug message.');
        self.logger.info('This is an info message.');
        self.logger.warn('This is a warning message.');
        self.logger.error('This is an error message.');

        // Using the coreAPI to make changes.
        //nodeObject = self.activeNode;
        //self.core.setAttribute(nodeObject, 'name', 'My new obj');
        //self.core.setRegistry(nodeObject, 'position', {x: 70, y: 70});


        // This will save the changes. If you don't want to save;
        // exclude self.save and call callback directly from this scope.
	
	//preload the sub-tree from activeNode
	self.loadNodeMap(this.activeNode)
            .then(function (nodes) {
		    var nodePath,
			node;

		    for (nodePath in nodes) {
		            self.logger.info(self.core.getAttribute(nodes[nodePath], 'name'),'has path', nodePath);
		    }
		    self.logger.info(core.getAttribute(activeNode, 'name'));
	
		    var members = {};
		    members = dfsTree(nodes, activeNode);
		    treeData = nbrOfAgents(members);
		    var mFileString ='';
		    mFileString = buildMatlabScript(members);
		    //mFileString = buildPythonScript(members);

	        //add the file to the blob-storage

		var mFileName = 'getAdjacency.m'; 
		//var mFileName = 'test.py'; 
		return self.blobClient.putFile(mFileName, mFileString);

            })
	    .then(function (metadataHash){
		    self.result.addArtifact(metadataHash);
		    self.result.setSuccess(true);
		    callback(null, self.result);
		    
	    })
            .catch(function (err) {
                // Result success is false at invocation.
		self.logger.error(err.stack);
                callback(err, self.result);
            });

    };

    return DACodeGenerator;
});

